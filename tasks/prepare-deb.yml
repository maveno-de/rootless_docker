---




- name: Determine latest containerd package version
  maveno_de.forks_collection.source_https:
    url: "https://download.docker.com/linux/{{ ansible_lsb['id']|lower }}/dists/{{ ansible_distribution_release }}/pool/stable/{{ forksSystemArchitecture }}/"
    filePrefix: containerd.io_
    suffix: "_{{ forksSystemArchitecture }}.deb"
    checkResult: no
    simple: yes
  register: containerdIoSourceHttpsResult
  environment:
    SSL_CERT_DIR: /etc/ssl/certs
    REQUESTS_CA_BUNDLE: "{{ forksSystemCaCertificatesFilePath }}"

- name: Determine latest Docker CE cli package version
  maveno_de.forks_collection.source_https:
    url: "https://download.docker.com/linux/{{ ansible_lsb['id']|lower }}/dists/{{ ansible_distribution_release }}/pool/stable/{{ forksSystemArchitecture }}/"
    filePrefix: 'docker-ce-cli_'
    suffix: "{{ ansible_lsb['id']|lower }}-{{ ansible_distribution_release }}_{{ forksSystemArchitecture }}.deb"
    checkResult: no
    simple: yes
  register: dockerCeCliSourceHttpsResult
  environment:
    SSL_CERT_DIR: /etc/ssl/certs
    REQUESTS_CA_BUNDLE: "{{ forksSystemCaCertificatesFilePath }}"

- name: Determine latest Docker CE package version
  maveno_de.forks_collection.source_https:
    url: "https://download.docker.com/linux/{{ ansible_lsb['id']|lower }}/dists/{{ ansible_distribution_release }}/pool/stable/{{ forksSystemArchitecture }}/"
    filePrefix: 'docker-ce_'
    suffix: "{{ ansible_lsb['id']|lower }}-{{ ansible_distribution_release }}_{{ forksSystemArchitecture }}.deb"
    checkResult: no
    simple: yes
  register: dockerCeSourceHttpsResult
  environment:
    SSL_CERT_DIR: /etc/ssl/certs
    REQUESTS_CA_BUNDLE: "{{ forksSystemCaCertificatesFilePath }}"

- name: Determine latest Docker rootless extras package version
  maveno_de.forks_collection.source_https:
    url: "https://download.docker.com/linux/{{ ansible_lsb['id']|lower }}/dists/{{ ansible_distribution_release }}/pool/stable/{{ forksSystemArchitecture }}/"
    filePrefix: 'docker-ce-rootless-extras_'
    suffix: "{{ ansible_lsb['id']|lower }}-{{ ansible_distribution_release }}_{{ forksSystemArchitecture }}.deb"  
    checkResult: no
    simple: yes
  register: dockerCeRootlessExtrasSourceHttpsResult
  environment:
    SSL_CERT_DIR: /etc/ssl/certs
    REQUESTS_CA_BUNDLE: "{{ forksSystemCaCertificatesFilePath }}"


- name: Switch temporarily to system python
  set_fact: 
    tempPythonInterpreter: "{{ ansible_python_interpreter }}"
- set_fact: 
    ansible_python_interpreter: "{{ forksSystemPythonInterpreter }}"
###

- name: Install Docker system packages for rootless mode (Debian family)
  when: 
    - ansible_facts['os_family'] == 'Debian'
    - forksDockerSystemUsername != ''
  become: true
  apt:
    state: latest
    pkg: uidmap

- name: Install RPi extra modules (Ubuntu 21.10 RPi)
  when:
    - ansible_distribution == 'Ubuntu'
    - >
      ansible_distribution_version == '21.10'
      or ansible_distribution_major_version > '21'
    - "'raspi' in ansible_kernel"
  become: true
  apt:
    state: latest
    pkg: linux-modules-extra-raspis


- name: Remove Docker CE
  when: ansible_facts['os_family'] == 'Debian'
  become: true
  apt:
    name:
      - docker-ce-rootless-extras
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: absent
  
- name: Install Docker CE
  when: ansible_facts['os_family'] == 'Debian'
  become: true
  apt:
    deb: "{{ dockerCeDebPackageUrlItem }}"
    cache_valid_time: 10800
  loop:
    - "{{ containerdIoSourceHttpsResult.recommended_url }}"
    - "{{ dockerCeCliSourceHttpsResult.recommended_url }}"
    - "{{ dockerCeSourceHttpsResult.recommended_url }}"
    - "{{ dockerCeRootlessExtrasSourceHttpsResult.recommended_url }}"
  loop_control:
    loop_var: dockerCeDebPackageUrlItem
  environment:
    SSL_CERT_DIR: /etc/ssl/certs
    REQUESTS_CA_BUNDLE: "{{ forksSystemCaCertificatesFilePath }}"

###
- name: Switch back to framework python venv
  set_fact: 
    ansible_python_interpreter: "{{ tempPythonInterpreter }}"


- name: Install slirp4netns
  include_tasks: installSlirp4NetNs.yml

- name: Install fuse-overlayfs
  include_tasks: installFuseOverlayFs.yml


- name: Stop and disable system docker service
  when: forksDockerDisableSystemDocker
  become: true
  systemd:
    name: docker.service
    enabled: no
    state: stopped
    daemon_reload: yes


...
